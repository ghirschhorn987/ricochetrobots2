Solving in reverse:

enum Robot {RED, YELLOW, BLUE, GREEN}
enum Direction {NORTH, EAST, SOUTH, WEST}

class Position {
  int column;
  int row;
}

class BoardState {
  Board board;
  Position targetPosition;
  Map<Robot, RobotPosition> robotToPosition;
}

class Move {
  Position start;
  Position end;
}

class RobotMove {
  Robot robot;
  Move move;
  BoardState startBoardState;
  BoardState getEndBoardState();
}

class RobotMoveList {
  static String NULL = "NO MOVES";
  List<RobotMove> robotMoves;
  BoardState getInitialBoardState();
  BoardState getFinalBoardState();
}

class RestrictionSet {
  Set<Restrictions> restriction;
}
  
class Restriction {
  Robot robot;
  Set<Position> positionsToAvoid;
}

MoveList getMovesNeeded(Robot robot, Position target, int maxMoves, RestrictionSet restrictions, BoardState boardState) {
  Position robotPosition = getRobotPosition(boardState, robot);
  if (robotPosition.equals(target)) {
    return new MoveList();
  }
  
  // First check if can solve with only moves by robot
  RobotMoveList moveList = getMovesNeededUsingOnlyRobot(robot, target, maxMoves, restrictions.clone(), boardState);
  if (!moveList.equals(MoveList.NULL)) {
    return moveList;
  }
  
  // Then check if can solve with moves by other robot
  return getMovesNeededUsingOnlyRobot(robot, target, maxMoves, restrictions.clone(), boardState);
}

/**
 * Find reverse positions from target and see if we can solve from there and then add the final path
 */
RobotMoveList getMovesNeededUsingOnlyRobot(Robot robot, Position target, int maxMoves, RestrictionSet restrictions, BoardState intialBoardState) {
  
  // Check each direction
  for (Direction direction : getPossibleDirections(target, intialBoardState)){
 
    // Check all positions in straight line from target to first obstacle. If we can get robot into this line, then it is easy
    // to move him to target.
    Position start = target;
    Position end = Position.NO_END; // move until blocked
    for (Position possiblePosition : getPositionsInRowFrom(start, end, direction, initialBoardState)) {
    
      // If position has a wall that can be richocheted off, then we can get it into this line. Otherwise, ignore. 
      // Direction is absoulte (North, East, etc.).  Left is 90 degress counter-clockwise from given direction. Right is opposite.
      Direction leftDirection = getDirectionToLeft(direction);
      Direction rightDirection = getDirectionToRight(direction);      
      if (hasWall(possiblePosition, leftDirection)) {
      
        // Recursively see if we there are moves that get Robot to this position.
        RobotMoveList previousMoveList = getMovesNeeded(robot, possiblePosition, maxMoves - 1, restrictions.clone(), intialBoardState.clone());
        if (!previousMoveList.equals(RobotMoveList.NULL)) {
        
          // We found a list of moves. Add a final move to the target and then return the new move list and the modified board
          // state.
          Move newMove = new Move(possiblePosition, target):
          blockingRobotMoveList = moveRobotOutOfWayIfNeeded(newMove, robot, previousMoveList.getFinalBoardState());
          if (!blockingRobotMoveList.equals(MoveList.NULL) {
            previousMoveList.addAll(blockingRobotMoveList);
          }
          
          // Add new move and return it (along with new board state)
          BoardState newBoardState = previousMoveList.getFinalBoardState().clone();
          newBoardState.move(robot, newMove);
          RobotMove newMove = new RobotMove(robot, newMove, newBoardState);         
          previousMoveList.add(newMove);
          return previousMoveList;
        }
      }
    }
  }
  
  // No possible moves found
  return MoveList.NULL;
}

/*
 * If there are any other robots blocking proposed move, move them out of way
 */
RobotMoveList moveRobotOutOfWayIfNeeded(robot, proposedMove, boardState) {
  BoardState newBoardState = null;
  boolean checkForBlocking = true;
  while (checkForBlocking) {
    Position blockingRobotPosition = getPositionOfOtherRobotBlockingMove(robot, proposedMove, boardState);
    if (blockingPosition == null) {
      checkForBlocking = false;
      break;
    }

    if (newBoardState == null) {
                newBoardState = previousMoveList.getFinalBoardState().clone();
              } else {
                newBoardState = newBoardState.clone();
              }
              
              Robot blockingRobot = newBoardState.getRobotAt(blockingRobotPosition);
              Move blockingMove = getAPossibleMove(blockingRobotPosition, EnumSet.of(leftDirectionm, rightDirections), newBoardState);
              newBoardState.move(blockingRobot, blockingMove);
              RobotMove newMove = new RobotMove(blockingRobot, blockingMove, newBoardState);
              previousMoveList.add(newMove);
            }
  }
  return moveList;
}
